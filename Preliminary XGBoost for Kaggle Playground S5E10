{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":91721,"databundleVersionId":13760552,"sourceType":"competition"}],"dockerImageVersionId":31153,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# ============================================================\n# CELL 1 — Setup & Imports\n# ============================================================\nimport os\nfrom pathlib import Path\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import mean_squared_error\n\nimport xgboost as xgb\nimport matplotlib.pyplot as plt\n\nSEED = 42\nnp.random.seed(SEED)\n\nprint(\"Versions -> pandas:\", pd.__version__, \"| xgboost:\", xgb.__version__)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:33:55.418504Z","iopub.execute_input":"2025-10-26T09:33:55.419156Z","iopub.status.idle":"2025-10-26T09:33:55.424312Z","shell.execute_reply.started":"2025-10-26T09:33:55.419136Z","shell.execute_reply":"2025-10-26T09:33:55.423533Z"}},"outputs":[{"name":"stdout","text":"Versions -> pandas: 2.2.3 | xgboost: 2.0.3\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"# ============================================================\n# CELL 2 — Load Data (robust to Kaggle paths)\n# ============================================================\ndef find_file(name_candidates):\n    # Try common Kaggle input roots; fallback to CWD\n    roots = [\n        Path(\"/kaggle/input\"),\n        Path(\"/kaggle/working\"),\n        Path(\".\"),\n    ]\n    for root in roots:\n        if root.exists():\n            for cand in name_candidates:\n                # exact filename in root\n                p = root / cand\n                if p.exists():\n                    return p\n            # recursive search\n            matches = list(root.rglob(name_candidates[0]))\n            if matches:\n                return matches[0]\n    return Path(name_candidates[0])  # last resort\n\ntrain_path = find_file([\"/kaggle/input/playground-series-s5e10/train.csv\"])\ntest_path  = find_file([\"/kaggle/input/playground-series-s5e10/test.csv\"])\nss_path    = find_file([\"/kaggle/input/playground-series-s5e10/sample_submission.csv\"])\n\nprint(\"Resolved paths:\")\nprint(\"train ->\", train_path)\nprint(\"test  ->\", test_path)\nprint(\"sub   ->\", ss_path)\n\ntrain = pd.read_csv(train_path)\ntest  = pd.read_csv(test_path)\nsample_submission = pd.read_csv(ss_path)\n\nprint(train.shape, test.shape)\ntrain.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:34:01.279174Z","iopub.execute_input":"2025-10-26T09:34:01.279844Z","iopub.status.idle":"2025-10-26T09:34:02.022387Z","shell.execute_reply.started":"2025-10-26T09:34:01.279823Z","shell.execute_reply":"2025-10-26T09:34:02.021755Z"}},"outputs":[{"name":"stdout","text":"Resolved paths:\ntrain -> /kaggle/input/playground-series-s5e10/train.csv\ntest  -> /kaggle/input/playground-series-s5e10/test.csv\nsub   -> /kaggle/input/playground-series-s5e10/sample_submission.csv\n(517754, 14) (172585, 13)\n","output_type":"stream"},{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"   id road_type  num_lanes  curvature  speed_limit  lighting weather  \\\n0   0     urban          2       0.06           35  daylight   rainy   \n1   1     urban          4       0.99           35  daylight   clear   \n2   2     rural          4       0.63           70       dim   clear   \n3   3   highway          4       0.07           35       dim   rainy   \n4   4     rural          1       0.58           60  daylight   foggy   \n\n   road_signs_present  public_road time_of_day  holiday  school_season  \\\n0               False         True   afternoon    False           True   \n1                True        False     evening     True           True   \n2               False         True     morning     True          False   \n3                True         True     morning    False          False   \n4               False        False     evening     True          False   \n\n   num_reported_accidents  accident_risk  \n0                       1           0.13  \n1                       0           0.35  \n2                       2           0.30  \n3                       1           0.21  \n4                       1           0.56  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>road_type</th>\n      <th>num_lanes</th>\n      <th>curvature</th>\n      <th>speed_limit</th>\n      <th>lighting</th>\n      <th>weather</th>\n      <th>road_signs_present</th>\n      <th>public_road</th>\n      <th>time_of_day</th>\n      <th>holiday</th>\n      <th>school_season</th>\n      <th>num_reported_accidents</th>\n      <th>accident_risk</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>urban</td>\n      <td>2</td>\n      <td>0.06</td>\n      <td>35</td>\n      <td>daylight</td>\n      <td>rainy</td>\n      <td>False</td>\n      <td>True</td>\n      <td>afternoon</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n      <td>0.13</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>urban</td>\n      <td>4</td>\n      <td>0.99</td>\n      <td>35</td>\n      <td>daylight</td>\n      <td>clear</td>\n      <td>True</td>\n      <td>False</td>\n      <td>evening</td>\n      <td>True</td>\n      <td>True</td>\n      <td>0</td>\n      <td>0.35</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>rural</td>\n      <td>4</td>\n      <td>0.63</td>\n      <td>70</td>\n      <td>dim</td>\n      <td>clear</td>\n      <td>False</td>\n      <td>True</td>\n      <td>morning</td>\n      <td>True</td>\n      <td>False</td>\n      <td>2</td>\n      <td>0.30</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>highway</td>\n      <td>4</td>\n      <td>0.07</td>\n      <td>35</td>\n      <td>dim</td>\n      <td>rainy</td>\n      <td>True</td>\n      <td>True</td>\n      <td>morning</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1</td>\n      <td>0.21</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>rural</td>\n      <td>1</td>\n      <td>0.58</td>\n      <td>60</td>\n      <td>daylight</td>\n      <td>foggy</td>\n      <td>False</td>\n      <td>False</td>\n      <td>evening</td>\n      <td>True</td>\n      <td>False</td>\n      <td>1</td>\n      <td>0.56</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":24},{"cell_type":"code","source":"# ============================================================\n# CELL 3 — Basic EDA / Sanity Checks\n# ============================================================\nTARGET = \"accident_risk\"\nID_COL = \"id\"\n\nassert TARGET in train.columns, f\"Target '{TARGET}' not found!\"\nassert ID_COL in train.columns and ID_COL in test.columns, \"ID column missing!\"\n\n# Separate X/y\ny = train[TARGET].astype(float).values\nX = train.drop(columns=[TARGET])\nX_test = test.copy()\n\n# Report types & missingness\ndef quick_info(df, name):\n    print(f\"--- {name} ---\")\n    print(\"Shape:\", df.shape)\n    print(\"DTypes:\\n\", df.dtypes.value_counts())\n    na = df.isna().sum()\n    if na.sum():\n        print(\"Missing (non-zero counts):\\n\", na[na > 0].sort_values(ascending=False).head(20))\n    else:\n        print(\"No missing values detected.\")\n    print()\n\nquick_info(X, \"Train Features\")\nquick_info(X_test, \"Test Features\")\n\nprint(\"Target summary:\")\nprint(pd.Series(y).describe())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:34:05.935205Z","iopub.execute_input":"2025-10-26T09:34:05.935482Z","iopub.status.idle":"2025-10-26T09:34:06.117615Z","shell.execute_reply.started":"2025-10-26T09:34:05.935463Z","shell.execute_reply":"2025-10-26T09:34:06.116798Z"}},"outputs":[{"name":"stdout","text":"--- Train Features ---\nShape: (517754, 13)\nDTypes:\n int64      4\nobject     4\nbool       4\nfloat64    1\nName: count, dtype: int64\nNo missing values detected.\n\n--- Test Features ---\nShape: (172585, 13)\nDTypes:\n int64      4\nobject     4\nbool       4\nfloat64    1\nName: count, dtype: int64\nNo missing values detected.\n\nTarget summary:\ncount    517754.000000\nmean          0.352377\nstd           0.166417\nmin           0.000000\n25%           0.230000\n50%           0.340000\n75%           0.460000\nmax           1.000000\ndtype: float64\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"# ============================================================\n# CELL 4 — Column Split & Preprocessor\n#   - XGBoost handles numeric natively.\n#   - Categorical -> OneHotEncoder(handle_unknown='ignore', sparse_output=True)\n# ============================================================\n# Identify column types\ncat_cols = [c for c in X.columns if X[c].dtype == \"object\" or str(X[c].dtype) == \"category\" or str(X[c].dtype) == \"bool\"]\nnum_cols = [c for c in X.columns if c not in cat_cols and c != ID_COL]\n\n# Ensure ID stays out of features\nif ID_COL in cat_cols: cat_cols.remove(ID_COL)\nif ID_COL in num_cols: num_cols.remove(ID_COL)\n\nprint(\"Num cols:\", len(num_cols))\nprint(\"Cat cols:\", len(cat_cols))\n\n# Preprocessor\nohe = OneHotEncoder(handle_unknown=\"ignore\", sparse=True)\npreprocessor = ColumnTransformer(\n    transformers=[\n        (\"num\", \"passthrough\", num_cols),\n        (\"cat\", ohe, cat_cols),\n    ],\n    remainder=\"drop\",\n    sparse_threshold=1.0,  # force sparse if any transformer is sparse\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:34:09.341687Z","iopub.execute_input":"2025-10-26T09:34:09.342272Z","iopub.status.idle":"2025-10-26T09:34:09.349261Z","shell.execute_reply.started":"2025-10-26T09:34:09.342249Z","shell.execute_reply":"2025-10-26T09:34:09.348469Z"}},"outputs":[{"name":"stdout","text":"Num cols: 4\nCat cols: 8\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"# ============================================================\n# CELL 5 — Model Definition (using tuned_params)\n# Notes:\n#  - Uses best hyperparameters from GPU search.\n#  - tree_method='hist' with device='cuda' for GPU acceleration.\n#  - eval_metric='rmse' remains consistent with competition metric.\n# ============================================================\ntuned_params = dict(\n    n_estimators=413,\n    learning_rate=0.02,\n    max_depth=8,\n    subsample=0.7,\n    colsample_bytree=1.0,\n    min_child_weight=0.5,\n    reg_alpha=0.0,\n    reg_lambda=1.0,\n    objective=\"reg:squarederror\",\n    tree_method=\"hist\",\n    random_state=SEED,\n    n_jobs=-1,\n    max_bin=384,\n    gamma=0.0,\n    device=\"cuda\"\n)\n\nmodel = xgb.XGBRegressor(**tuned_params)\n\npipe = Pipeline(\n    steps=[\n        (\"prep\", preprocessor),\n        (\"xgb\", model),\n    ]\n)\n\npipe\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:34:40.060191Z","iopub.execute_input":"2025-10-26T09:34:40.060469Z","iopub.status.idle":"2025-10-26T09:34:40.081998Z","shell.execute_reply.started":"2025-10-26T09:34:40.060450Z","shell.execute_reply":"2025-10-26T09:34:40.081309Z"}},"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('prep',\n                 ColumnTransformer(sparse_threshold=1.0,\n                                   transformers=[('num', 'passthrough',\n                                                  ['num_lanes', 'curvature',\n                                                   'speed_limit',\n                                                   'num_reported_accidents']),\n                                                 ('cat',\n                                                  OneHotEncoder(handle_unknown='ignore',\n                                                                sparse=True),\n                                                  ['road_type', 'lighting',\n                                                   'weather',\n                                                   'road_signs_present',\n                                                   'public_road', 'time_of_day',\n                                                   'holiday',\n                                                   'school_season'])])),\n                ('xgb',\n                 XGBRegr...\n                              feature_types=None, gamma=0.0, grow_policy=None,\n                              importance_type=None,\n                              interaction_constraints=None, learning_rate=0.02,\n                              max_bin=384, max_cat_threshold=None,\n                              max_cat_to_onehot=None, max_delta_step=None,\n                              max_depth=8, max_leaves=None,\n                              min_child_weight=0.5, missing=nan,\n                              monotone_constraints=None, multi_strategy=None,\n                              n_estimators=413, n_jobs=-1,\n                              num_parallel_tree=None, random_state=42, ...))])","text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;prep&#x27;,\n                 ColumnTransformer(sparse_threshold=1.0,\n                                   transformers=[(&#x27;num&#x27;, &#x27;passthrough&#x27;,\n                                                  [&#x27;num_lanes&#x27;, &#x27;curvature&#x27;,\n                                                   &#x27;speed_limit&#x27;,\n                                                   &#x27;num_reported_accidents&#x27;]),\n                                                 (&#x27;cat&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n                                                                sparse=True),\n                                                  [&#x27;road_type&#x27;, &#x27;lighting&#x27;,\n                                                   &#x27;weather&#x27;,\n                                                   &#x27;road_signs_present&#x27;,\n                                                   &#x27;public_road&#x27;, &#x27;time_of_day&#x27;,\n                                                   &#x27;holiday&#x27;,\n                                                   &#x27;school_season&#x27;])])),\n                (&#x27;xgb&#x27;,\n                 XGBRegr...\n                              feature_types=None, gamma=0.0, grow_policy=None,\n                              importance_type=None,\n                              interaction_constraints=None, learning_rate=0.02,\n                              max_bin=384, max_cat_threshold=None,\n                              max_cat_to_onehot=None, max_delta_step=None,\n                              max_depth=8, max_leaves=None,\n                              min_child_weight=0.5, missing=nan,\n                              monotone_constraints=None, multi_strategy=None,\n                              n_estimators=413, n_jobs=-1,\n                              num_parallel_tree=None, random_state=42, ...))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" ><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;prep&#x27;,\n                 ColumnTransformer(sparse_threshold=1.0,\n                                   transformers=[(&#x27;num&#x27;, &#x27;passthrough&#x27;,\n                                                  [&#x27;num_lanes&#x27;, &#x27;curvature&#x27;,\n                                                   &#x27;speed_limit&#x27;,\n                                                   &#x27;num_reported_accidents&#x27;]),\n                                                 (&#x27;cat&#x27;,\n                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n                                                                sparse=True),\n                                                  [&#x27;road_type&#x27;, &#x27;lighting&#x27;,\n                                                   &#x27;weather&#x27;,\n                                                   &#x27;road_signs_present&#x27;,\n                                                   &#x27;public_road&#x27;, &#x27;time_of_day&#x27;,\n                                                   &#x27;holiday&#x27;,\n                                                   &#x27;school_season&#x27;])])),\n                (&#x27;xgb&#x27;,\n                 XGBRegr...\n                              feature_types=None, gamma=0.0, grow_policy=None,\n                              importance_type=None,\n                              interaction_constraints=None, learning_rate=0.02,\n                              max_bin=384, max_cat_threshold=None,\n                              max_cat_to_onehot=None, max_delta_step=None,\n                              max_depth=8, max_leaves=None,\n                              min_child_weight=0.5, missing=nan,\n                              monotone_constraints=None, multi_strategy=None,\n                              n_estimators=413, n_jobs=-1,\n                              num_parallel_tree=None, random_state=42, ...))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-23\" type=\"checkbox\" ><label for=\"sk-estimator-id-23\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">prep: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(sparse_threshold=1.0,\n                  transformers=[(&#x27;num&#x27;, &#x27;passthrough&#x27;,\n                                 [&#x27;num_lanes&#x27;, &#x27;curvature&#x27;, &#x27;speed_limit&#x27;,\n                                  &#x27;num_reported_accidents&#x27;]),\n                                (&#x27;cat&#x27;,\n                                 OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n                                               sparse=True),\n                                 [&#x27;road_type&#x27;, &#x27;lighting&#x27;, &#x27;weather&#x27;,\n                                  &#x27;road_signs_present&#x27;, &#x27;public_road&#x27;,\n                                  &#x27;time_of_day&#x27;, &#x27;holiday&#x27;, &#x27;school_season&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-24\" type=\"checkbox\" ><label for=\"sk-estimator-id-24\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num</label><div class=\"sk-toggleable__content\"><pre>[&#x27;num_lanes&#x27;, &#x27;curvature&#x27;, &#x27;speed_limit&#x27;, &#x27;num_reported_accidents&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-25\" type=\"checkbox\" ><label for=\"sk-estimator-id-25\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-26\" type=\"checkbox\" ><label for=\"sk-estimator-id-26\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat</label><div class=\"sk-toggleable__content\"><pre>[&#x27;road_type&#x27;, &#x27;lighting&#x27;, &#x27;weather&#x27;, &#x27;road_signs_present&#x27;, &#x27;public_road&#x27;, &#x27;time_of_day&#x27;, &#x27;holiday&#x27;, &#x27;school_season&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-27\" type=\"checkbox\" ><label for=\"sk-estimator-id-27\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;, sparse=True)</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-28\" type=\"checkbox\" ><label for=\"sk-estimator-id-28\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=1.0, device=&#x27;cuda&#x27;, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=None, feature_types=None,\n             gamma=0.0, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.02, max_bin=384,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=8, max_leaves=None,\n             min_child_weight=0.5, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=413, n_jobs=-1,\n             num_parallel_tree=None, random_state=42, ...)</pre></div></div></div></div></div></div></div>"},"metadata":{}}],"execution_count":27},{"cell_type":"code","source":"# ============================================================\n# CELL 6 — K-Fold CV with Early Stopping (Tuned)\n# ============================================================\nfrom sklearn.base import clone\n\nkf = KFold(n_splits=5, shuffle=True, random_state=SEED)\nfold_scores = []\nbest_iters = []\n\nfor fold, (tr_idx, va_idx) in enumerate(kf.split(X, y), 1):\n    print(f\"=== Fold {fold} ===\")\n\n    X_tr, y_tr = X.iloc[tr_idx], y[tr_idx]\n    X_va, y_va = X.iloc[va_idx], y[va_idx]\n\n    # Fit preprocessor on training only\n    X_tr_prep = preprocessor.fit_transform(X_tr)\n    X_va_prep = preprocessor.transform(X_va)\n\n    # Fresh model each fold\n    fold_model = xgb.XGBRegressor(**tuned_params)\n\n    # Early stopping (smaller since tuned)\n    fold_model.fit(\n        X_tr_prep, y_tr,\n        eval_set=[(X_va_prep, y_va)],\n        eval_metric=\"rmse\",\n        early_stopping_rounds=200,\n        verbose=False\n    )\n\n    y_pred = fold_model.predict(X_va_prep)\n    rmse = mean_squared_error(y_va, y_pred, squared=False)\n    fold_scores.append(rmse)\n    best_iters.append(fold_model.best_iteration or fold_model.n_estimators)\n\n    print(f\"Fold {fold}: RMSE={rmse:.5f} | Best iteration={fold_model.best_iteration}\")\n\ncv_rmse = np.mean(fold_scores)\ncv_std  = np.std(fold_scores)\navg_best_iter = int(np.mean(best_iters))\n\nprint(\"\\nOverall CV RMSE: %.6f ± %.6f\" % (cv_rmse, cv_std))\nprint(\"Average best_iteration across folds:\", avg_best_iter)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:34:52.776408Z","iopub.execute_input":"2025-10-26T09:34:52.776680Z","iopub.status.idle":"2025-10-26T09:35:15.478820Z","shell.execute_reply.started":"2025-10-26T09:34:52.776662Z","shell.execute_reply":"2025-10-26T09:35:15.477967Z"}},"outputs":[{"name":"stdout","text":"=== Fold 1 ===\nFold 1: RMSE=0.05613 | Best iteration=397\n=== Fold 2 ===\nFold 2: RMSE=0.05605 | Best iteration=357\n=== Fold 3 ===\nFold 3: RMSE=0.05609 | Best iteration=352\n=== Fold 4 ===\nFold 4: RMSE=0.05590 | Best iteration=333\n=== Fold 5 ===\nFold 5: RMSE=0.05582 | Best iteration=386\n\nOverall CV RMSE: 0.055999 ± 0.000118\nAverage best_iteration across folds: 365\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"# ============================================================\n# CELL 7 — Train Final Model on Full Data (using tuned_params)\n# Notes:\n#  - Uses tuned hyperparameters from GPU search.\n#  - n_estimators scaled by ~1.1 × avg_best_iter for robustness.\n#  - No early stopping; trained on full dataset.\n# ============================================================\nfinal_n_estimators = max(200, int(avg_best_iter * 1.1))  # e.g., 376 * 1.1 = 413\n\nfinal_params = tuned_params.copy()\nfinal_params[\"n_estimators\"] = final_n_estimators\n\nfinal_model = xgb.XGBRegressor(**final_params)\n\nfinal_pipe = Pipeline(\n    steps=[\n        (\"prep\", preprocessor),\n        (\"xgb\", final_model),\n    ]\n)\n\nfinal_pipe.fit(X, y, xgb__verbose=False)\nprint(\"Final model trained with n_estimators =\", final_n_estimators)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:35:24.449301Z","iopub.execute_input":"2025-10-26T09:35:24.450076Z","iopub.status.idle":"2025-10-26T09:35:29.139542Z","shell.execute_reply.started":"2025-10-26T09:35:24.450050Z","shell.execute_reply":"2025-10-26T09:35:29.138265Z"}},"outputs":[{"name":"stdout","text":"Final model trained with n_estimators = 401\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"# ============================================================\n# CELL 8 — Predict & Build Submission (Tuned)\n# Notes:\n#  - Uses final_pipe trained on full data.\n#  - Predictions clipped to [0, 1] per competition requirements.\n# ============================================================\ntest_pred = final_pipe.predict(X_test)\ntest_pred = np.clip(test_pred, 0.0, 1.0)\n\nsubmission = pd.DataFrame({\n    ID_COL: X_test[ID_COL].values,\n    TARGET: test_pred,\n})\n\nsubmission_path = \"submission.csv\"\nsubmission.to_csv(submission_path, index=False)\n\nprint(f\"Submission saved to {submission_path}\")\nsubmission.head(10)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:35:56.560969Z","iopub.execute_input":"2025-10-26T09:35:56.561256Z","iopub.status.idle":"2025-10-26T09:35:57.065921Z","shell.execute_reply.started":"2025-10-26T09:35:56.561237Z","shell.execute_reply":"2025-10-26T09:35:57.065205Z"}},"outputs":[{"name":"stdout","text":"Submission saved to submission.csv\n","output_type":"stream"},{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"       id  accident_risk\n0  517754       0.295569\n1  517755       0.120697\n2  517756       0.182239\n3  517757       0.313946\n4  517758       0.404401\n5  517759       0.459288\n6  517760       0.263369\n7  517761       0.196773\n8  517762       0.364345\n9  517763       0.326502","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>accident_risk</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>517754</td>\n      <td>0.295569</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>517755</td>\n      <td>0.120697</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>517756</td>\n      <td>0.182239</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>517757</td>\n      <td>0.313946</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>517758</td>\n      <td>0.404401</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>517759</td>\n      <td>0.459288</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>517760</td>\n      <td>0.263369</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>517761</td>\n      <td>0.196773</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>517762</td>\n      <td>0.364345</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>517763</td>\n      <td>0.326502</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":30},{"cell_type":"code","source":"# ============================================================\n# CELL 9 — Feature Importance (Optional, quick look)\n# Note: importance is after preprocessing; we can get booster importance.\n# For OHE features, names are expanded; we’ll attempt to recover them.\n# ============================================================\n# Fit a one-off prep to extract feature names\npreprocessor.fit(X)\n\nnum_feature_names = num_cols\ntry:\n    cat_feature_names = list(preprocessor.named_transformers_[\"cat\"].get_feature_names_out(cat_cols))\nexcept Exception as e:\n    cat_feature_names = []\nfeature_names = np.array(list(num_feature_names) + cat_feature_names)\n\nbooster = final_pipe.named_steps[\"xgb\"].get_booster()\nimportance = booster.get_score(importance_type=\"weight\")  # split count\n# Map f0, f1, ... to names (works because XGBoost orders features as preprocessor outputs)\nimp_df = []\nfor k, v in importance.items():\n    # k is like 'f123'\n    try:\n        idx = int(k[1:])\n        name = feature_names[idx] if idx < len(feature_names) else k\n    except:\n        name = k\n    imp_df.append((name, v))\nimp_df = pd.DataFrame(imp_df, columns=[\"feature\", \"weight\"]).sort_values(\"weight\", ascending=False).head(40)\n\nplt.figure(figsize=(6, max(4, 0.25 * len(imp_df))))\nplt.barh(imp_df[\"feature\"][::-1], imp_df[\"weight\"][::-1])\nplt.title(\"XGBoost Feature Importance (top 40, weight)\")\nplt.xlabel(\"Weight\")\nplt.ylabel(\"Feature\")\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:36:05.161774Z","iopub.execute_input":"2025-10-26T09:36:05.162063Z","iopub.status.idle":"2025-10-26T09:36:06.168572Z","shell.execute_reply.started":"2025-10-26T09:36:05.162042Z","shell.execute_reply":"2025-10-26T09:36:06.167886Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 600x500 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":31},{"cell_type":"code","source":"# ============================================================\n# CELL 10 — Save Model Artifacts (Optional)\n# ============================================================\nimport joblib\njoblib.dump(final_pipe, \"final_xgb_pipeline.joblib\")\nprint(\"Saved: final_xgb_pipeline.joblib and submission.csv\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:36:08.858352Z","iopub.execute_input":"2025-10-26T09:36:08.859085Z","iopub.status.idle":"2025-10-26T09:36:08.892325Z","shell.execute_reply.started":"2025-10-26T09:36:08.859065Z","shell.execute_reply":"2025-10-26T09:36:08.891551Z"}},"outputs":[{"name":"stdout","text":"Saved: final_xgb_pipeline.joblib and submission.csv\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}