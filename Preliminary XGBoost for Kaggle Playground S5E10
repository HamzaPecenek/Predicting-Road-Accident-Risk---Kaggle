{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":91721,"databundleVersionId":13760552,"sourceType":"competition"}],"dockerImageVersionId":31153,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Core libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Preprocessing & modeling\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import mean_squared_error\n\n# Model\nfrom xgboost import XGBRegressor\n\n# Explainability\nimport shap\nfrom sklearn.inspection import permutation_importance\n\n# Utils\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nSEED = 42\nnp.random.seed(SEED)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:55:53.702730Z","iopub.execute_input":"2025-10-26T09:55:53.703298Z","iopub.status.idle":"2025-10-26T09:55:53.708093Z","shell.execute_reply.started":"2025-10-26T09:55:53.703276Z","shell.execute_reply":"2025-10-26T09:55:53.707293Z"}},"outputs":[],"execution_count":38},{"cell_type":"code","source":"# ============================================================\n# CELL 2 — Load Data\n# ============================================================\n\ntrain = pd.read_csv(\"/kaggle/input/playground-series-s5e10/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/playground-series-s5e10/test.csv\")\n\nprint(\"Train shape:\", train.shape)\nprint(\"Test shape:\", test.shape)\ntrain.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:56:25.825855Z","iopub.execute_input":"2025-10-26T09:56:25.826143Z","iopub.status.idle":"2025-10-26T09:56:26.496394Z","shell.execute_reply.started":"2025-10-26T09:56:25.826123Z","shell.execute_reply":"2025-10-26T09:56:26.495707Z"}},"outputs":[{"name":"stdout","text":"Train shape: (517754, 14)\nTest shape: (172585, 13)\n","output_type":"stream"},{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"   id road_type  num_lanes  curvature  speed_limit  lighting weather  \\\n0   0     urban          2       0.06           35  daylight   rainy   \n1   1     urban          4       0.99           35  daylight   clear   \n2   2     rural          4       0.63           70       dim   clear   \n3   3   highway          4       0.07           35       dim   rainy   \n4   4     rural          1       0.58           60  daylight   foggy   \n\n   road_signs_present  public_road time_of_day  holiday  school_season  \\\n0               False         True   afternoon    False           True   \n1                True        False     evening     True           True   \n2               False         True     morning     True          False   \n3                True         True     morning    False          False   \n4               False        False     evening     True          False   \n\n   num_reported_accidents  accident_risk  \n0                       1           0.13  \n1                       0           0.35  \n2                       2           0.30  \n3                       1           0.21  \n4                       1           0.56  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>road_type</th>\n      <th>num_lanes</th>\n      <th>curvature</th>\n      <th>speed_limit</th>\n      <th>lighting</th>\n      <th>weather</th>\n      <th>road_signs_present</th>\n      <th>public_road</th>\n      <th>time_of_day</th>\n      <th>holiday</th>\n      <th>school_season</th>\n      <th>num_reported_accidents</th>\n      <th>accident_risk</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>urban</td>\n      <td>2</td>\n      <td>0.06</td>\n      <td>35</td>\n      <td>daylight</td>\n      <td>rainy</td>\n      <td>False</td>\n      <td>True</td>\n      <td>afternoon</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n      <td>0.13</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>urban</td>\n      <td>4</td>\n      <td>0.99</td>\n      <td>35</td>\n      <td>daylight</td>\n      <td>clear</td>\n      <td>True</td>\n      <td>False</td>\n      <td>evening</td>\n      <td>True</td>\n      <td>True</td>\n      <td>0</td>\n      <td>0.35</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>rural</td>\n      <td>4</td>\n      <td>0.63</td>\n      <td>70</td>\n      <td>dim</td>\n      <td>clear</td>\n      <td>False</td>\n      <td>True</td>\n      <td>morning</td>\n      <td>True</td>\n      <td>False</td>\n      <td>2</td>\n      <td>0.30</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>highway</td>\n      <td>4</td>\n      <td>0.07</td>\n      <td>35</td>\n      <td>dim</td>\n      <td>rainy</td>\n      <td>True</td>\n      <td>True</td>\n      <td>morning</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1</td>\n      <td>0.21</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>rural</td>\n      <td>1</td>\n      <td>0.58</td>\n      <td>60</td>\n      <td>daylight</td>\n      <td>foggy</td>\n      <td>False</td>\n      <td>False</td>\n      <td>evening</td>\n      <td>True</td>\n      <td>False</td>\n      <td>1</td>\n      <td>0.56</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":39},{"cell_type":"code","source":"# ============================================================\n# CELL 3 — Basic EDA\n# ============================================================\n\nprint(\"Missing values per column:\\n\", train.isna().sum().sort_values(ascending=False))\nprint(\"\\nDuplicated rows:\", train.duplicated().sum())\nprint(\"\\nData types:\")\nprint(train.dtypes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:56:53.746072Z","iopub.execute_input":"2025-10-26T09:56:53.746358Z","iopub.status.idle":"2025-10-26T09:56:54.016224Z","shell.execute_reply.started":"2025-10-26T09:56:53.746338Z","shell.execute_reply":"2025-10-26T09:56:54.015440Z"}},"outputs":[{"name":"stdout","text":"Missing values per column:\n id                        0\nroad_type                 0\nnum_lanes                 0\ncurvature                 0\nspeed_limit               0\nlighting                  0\nweather                   0\nroad_signs_present        0\npublic_road               0\ntime_of_day               0\nholiday                   0\nschool_season             0\nnum_reported_accidents    0\naccident_risk             0\ndtype: int64\n\nDuplicated rows: 0\n\nData types:\nid                          int64\nroad_type                  object\nnum_lanes                   int64\ncurvature                 float64\nspeed_limit                 int64\nlighting                   object\nweather                    object\nroad_signs_present           bool\npublic_road                  bool\ntime_of_day                object\nholiday                      bool\nschool_season                bool\nnum_reported_accidents      int64\naccident_risk             float64\ndtype: object\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"# ============================================================\n# CELL 4 — Column Split & Preprocessor\n#   - XGBoost handles numeric natively.\n# ============================================================\n\n# Identify column groups\ntarget_col = \"accident_risk\"  # change if necessary\n\nnumeric_cols = train.select_dtypes(include=[\"int64\", \"float64\"]).columns.drop(target_col)\nbool_cols = [\"road_signs_present\", \"public_road\", \"holiday\", \"school_season\"]\ncat_cols = [\"road_type\", \"lighting\", \"weather\", \"time_of_day\"]\n\nprint(\"Numeric:\", list(numeric_cols))\nprint(\"Categorical:\", cat_cols)\nprint(\"Boolean:\", bool_cols)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:57:28.181981Z","iopub.execute_input":"2025-10-26T09:57:28.182568Z","iopub.status.idle":"2025-10-26T09:57:28.193538Z","shell.execute_reply.started":"2025-10-26T09:57:28.182533Z","shell.execute_reply":"2025-10-26T09:57:28.192880Z"}},"outputs":[{"name":"stdout","text":"Numeric: ['id', 'num_lanes', 'curvature', 'speed_limit', 'num_reported_accidents']\nCategorical: ['road_type', 'lighting', 'weather', 'time_of_day']\nBoolean: ['road_signs_present', 'public_road', 'holiday', 'school_season']\n","output_type":"stream"}],"execution_count":42},{"cell_type":"code","source":"def add_interaction_features(df):\n    df = df.copy()\n    df[\"curv_speed\"] = df[\"curvature\"] * df[\"speed_limit\"]\n    df[\"curv_light\"] = df[\"curvature\"].astype(str) + \"_\" + df[\"lighting\"].astype(str)\n    df[\"speed_light\"] = df[\"speed_limit\"].astype(str) + \"_\" + df[\"lighting\"].astype(str)\n    return df\n\ntrain = add_interaction_features(train)\ntest = add_interaction_features(test)\n\n# Add new categorical interactions to list\ncat_cols += [\"curv_light\", \"speed_light\"]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:57:42.172596Z","iopub.execute_input":"2025-10-26T09:57:42.173334Z","iopub.status.idle":"2025-10-26T09:57:42.944518Z","shell.execute_reply.started":"2025-10-26T09:57:42.173309Z","shell.execute_reply":"2025-10-26T09:57:42.943909Z"}},"outputs":[],"execution_count":43},{"cell_type":"code","source":"# OneHot encode categorical variables; pass through numerics & bools\npreprocessor = ColumnTransformer(\n    transformers=[\n        (\"cat\", OneHotEncoder(handle_unknown=\"ignore\", sparse=False, dtype=np.uint8), cat_cols),\n        (\"num\", \"passthrough\", list(numeric_cols) + bool_cols),\n    ],\n    remainder=\"drop\"\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:58:04.301120Z","iopub.execute_input":"2025-10-26T09:58:04.301601Z","iopub.status.idle":"2025-10-26T09:58:04.305440Z","shell.execute_reply.started":"2025-10-26T09:58:04.301578Z","shell.execute_reply":"2025-10-26T09:58:04.304660Z"}},"outputs":[],"execution_count":44},{"cell_type":"markdown","source":"tuned_params = dict(\n    n_estimators=413,\n    learning_rate=0.02,\n    max_depth=8,\n    subsample=0.7,\n    colsample_bytree=1.0,\n    min_child_weight=0.5,\n    reg_alpha=0.0,\n    reg_lambda=1.0,\n    objective=\"reg:squarederror\",\n    tree_method=\"hist\",\n    random_state=SEED,\n    n_jobs=-1,\n    max_bin=384,\n    gamma=0.0,\n    device=\"cuda\"\n)\n\nearly_stopping_rounds=200,","metadata":{}},{"cell_type":"code","source":"xgb_model = XGBRegressor(\n    n_estimators=800,\n    learning_rate=0.03,\n    max_depth=6,\n    subsample=0.9,\n    colsample_bytree=0.9,\n    reg_alpha=0.1,\n    reg_lambda=0.8,\n    random_state=SEED,\n    tree_method=\"hist\",\n    grow_policy=\"lossguide\",\n    n_jobs=-1,\n    verbosity=0,\n)\n\npipe = Pipeline([\n    (\"preprocessor\", preprocessor),\n    (\"xgb\", xgb_model)\n])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:58:25.530694Z","iopub.execute_input":"2025-10-26T09:58:25.531401Z","iopub.status.idle":"2025-10-26T09:58:25.535502Z","shell.execute_reply.started":"2025-10-26T09:58:25.531376Z","shell.execute_reply":"2025-10-26T09:58:25.534656Z"}},"outputs":[],"execution_count":45},{"cell_type":"code","source":"X = train.drop(columns=[target_col])\ny = train[target_col]\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=SEED)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:58:36.525770Z","iopub.execute_input":"2025-10-26T09:58:36.526057Z","iopub.status.idle":"2025-10-26T09:58:36.700961Z","shell.execute_reply.started":"2025-10-26T09:58:36.526037Z","shell.execute_reply":"2025-10-26T09:58:36.700296Z"}},"outputs":[],"execution_count":46},{"cell_type":"code","source":"pipe.fit(X_train, y_train)\n\ny_pred = pipe.predict(X_val)\nrmse = np.sqrt(mean_squared_error(y_val, y_pred))\nprint(f\"Validation RMSE: {rmse:.5f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T09:58:42.157537Z","iopub.execute_input":"2025-10-26T09:58:42.157805Z","iopub.status.idle":"2025-10-26T10:00:43.941273Z","shell.execute_reply.started":"2025-10-26T09:58:42.157784Z","shell.execute_reply":"2025-10-26T10:00:43.940449Z"}},"outputs":[{"name":"stdout","text":"Validation RMSE: 0.05627\n","output_type":"stream"}],"execution_count":47},{"cell_type":"code","source":"cv = KFold(n_splits=5, shuffle=True, random_state=SEED)\ncv_rmse = np.sqrt(-cross_val_score(pipe, X, y, cv=cv, scoring=\"neg_mean_squared_error\"))\nprint(f\"Cross-val RMSEs: {cv_rmse}\")\nprint(f\"Mean CV RMSE: {cv_rmse.mean():.5f} ± {cv_rmse.std():.5f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-26T10:00:54.654502Z","iopub.execute_input":"2025-10-26T10:00:54.655159Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Get transformed features\npipe.fit(X, y)\nfeature_names = (\n    pipe.named_steps[\"preprocessor\"]\n    .get_feature_names_out()\n)\n\nperm_result = permutation_importance(pipe, X, y, n_repeats=5, random_state=SEED)\nimp_df = pd.DataFrame({\n    \"feature\": feature_names,\n    \"importance\": perm_result.importances_mean\n}).sort_values(\"importance\", ascending=False)\n\nplt.figure(figsize=(8, 6))\nsns.barplot(x=\"importance\", y=\"feature\", data=imp_df.head(20))\nplt.title(\"Top 20 Feature Importances (Permutation)\")\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"explainer = shap.TreeExplainer(pipe.named_steps[\"xgb\"])\nsample = preprocessor.transform(X.sample(5000, random_state=SEED))\nshap_values = explainer.shap_values(sample)\n\nshap.summary_plot(shap_values, feature_names=feature_names, max_display=25)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"final_preds = pipe.predict(test)\n\nsubmission = pd.DataFrame({\n    \"id\": test[\"id\"],  # adjust if your ID column name differs\n    \"target\": final_preds\n})\nsubmission.to_csv(\"submission_xgb_optimized.csv\", index=False)\nprint(\"Submission saved as submission_xgb_optimized.csv\")\n","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}