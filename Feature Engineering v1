{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91721,"databundleVersionId":13760552,"sourceType":"competition"}],"dockerImageVersionId":31153,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# ============================================================\n#  Cell 1: Setup & Load Base Data\n# ============================================================\n\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\n\n# Paths\nDATA_DIR = Path(\".\")\nTRAIN_PATH = DATA_DIR / \"/kaggle/input/playground-series-s5e10/train.csv\"\nTEST_PATH  = DATA_DIR / \"/kaggle/input/playground-series-s5e10/test.csv\"\n\ntrain = pd.read_csv(TRAIN_PATH)\ntest  = pd.read_csv(TEST_PATH)\n\nprint(\"Shapes ->\", train.shape, test.shape)\ndisplay(train.head(3))\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-25T10:37:34.991820Z","iopub.execute_input":"2025-10-25T10:37:34.992107Z","iopub.status.idle":"2025-10-25T10:37:37.446837Z","shell.execute_reply.started":"2025-10-25T10:37:34.992086Z","shell.execute_reply":"2025-10-25T10:37:37.445816Z"}},"outputs":[{"name":"stdout","text":"Shapes -> (517754, 14) (172585, 13)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"   id road_type  num_lanes  curvature  speed_limit  lighting weather  \\\n0   0     urban          2       0.06           35  daylight   rainy   \n1   1     urban          4       0.99           35  daylight   clear   \n2   2     rural          4       0.63           70       dim   clear   \n\n   road_signs_present  public_road time_of_day  holiday  school_season  \\\n0               False         True   afternoon    False           True   \n1                True        False     evening     True           True   \n2               False         True     morning     True          False   \n\n   num_reported_accidents  accident_risk  \n0                       1           0.13  \n1                       0           0.35  \n2                       2           0.30  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>road_type</th>\n      <th>num_lanes</th>\n      <th>curvature</th>\n      <th>speed_limit</th>\n      <th>lighting</th>\n      <th>weather</th>\n      <th>road_signs_present</th>\n      <th>public_road</th>\n      <th>time_of_day</th>\n      <th>holiday</th>\n      <th>school_season</th>\n      <th>num_reported_accidents</th>\n      <th>accident_risk</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>urban</td>\n      <td>2</td>\n      <td>0.06</td>\n      <td>35</td>\n      <td>daylight</td>\n      <td>rainy</td>\n      <td>False</td>\n      <td>True</td>\n      <td>afternoon</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n      <td>0.13</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>urban</td>\n      <td>4</td>\n      <td>0.99</td>\n      <td>35</td>\n      <td>daylight</td>\n      <td>clear</td>\n      <td>True</td>\n      <td>False</td>\n      <td>evening</td>\n      <td>True</td>\n      <td>True</td>\n      <td>0</td>\n      <td>0.35</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>rural</td>\n      <td>4</td>\n      <td>0.63</td>\n      <td>70</td>\n      <td>dim</td>\n      <td>clear</td>\n      <td>False</td>\n      <td>True</td>\n      <td>morning</td>\n      <td>True</td>\n      <td>False</td>\n      <td>2</td>\n      <td>0.30</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":1},{"cell_type":"code","source":"# ============================================================\n#  Cell 2: Identify Columns & Basic Config\n# ============================================================\n\ntarget_col = \"accident_risk\"\nid_col = \"id\"\n\n# --- Column groups from EDA ---\nnum_cols = [\"curvature\", \"speed_limit\", \"num_lanes\", \"num_reported_accidents\"]\nbool_cols = [\"road_signs_present\", \"public_road\", \"holiday\", \"school_season\"]\ncat_cols = [\"road_type\", \"lighting\", \"weather\", \"time_of_day\"]\n\n# Verify presence\nfor c in num_cols + bool_cols + cat_cols + [target_col]:\n    assert c in train.columns, f\"{c} missing!\"\n\nprint(\"✅ Column groups established.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T10:37:43.692549Z","iopub.execute_input":"2025-10-25T10:37:43.692905Z","iopub.status.idle":"2025-10-25T10:37:43.701319Z","shell.execute_reply.started":"2025-10-25T10:37:43.692883Z","shell.execute_reply":"2025-10-25T10:37:43.700148Z"}},"outputs":[{"name":"stdout","text":"✅ Column groups established.\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"# ============================================================\n#  Cell 3: Core Numeric Transformations\n# ============================================================\n\ndef add_numeric_features(df):\n    df = df.copy()\n    # Log transform of accident history\n    df[\"accidents_log1p\"] = np.log1p(df[\"num_reported_accidents\"])\n    # Binary threshold (≥3)\n    df[\"accidents_ge3\"] = (df[\"num_reported_accidents\"] >= 3).astype(int)\n    # Curvature squared\n    df[\"curvature_sq\"] = df[\"curvature\"] ** 2\n    return df\n\ntrain = add_numeric_features(train)\ntest  = add_numeric_features(test)\n\nprint(\"✅ Numeric transforms added.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T10:37:54.284877Z","iopub.execute_input":"2025-10-25T10:37:54.285178Z","iopub.status.idle":"2025-10-25T10:37:54.364166Z","shell.execute_reply.started":"2025-10-25T10:37:54.285154Z","shell.execute_reply":"2025-10-25T10:37:54.363341Z"}},"outputs":[{"name":"stdout","text":"✅ Numeric transforms added.\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"# ============================================================\n#  Cell 4: Ensure Categorical Columns Are Strings\n# ============================================================\n\nfor c in cat_cols:\n    train[c] = train[c].astype(str)\n    test[c]  = test[c].astype(str)\n\nprint(\"✅ Categoricals cast to str for combos.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T10:38:00.254458Z","iopub.execute_input":"2025-10-25T10:38:00.254781Z","iopub.status.idle":"2025-10-25T10:38:00.308271Z","shell.execute_reply.started":"2025-10-25T10:38:00.254756Z","shell.execute_reply":"2025-10-25T10:38:00.307538Z"}},"outputs":[{"name":"stdout","text":"✅ Categoricals cast to str for combos.\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"# ============================================================\n#  Cell 5: Create Interaction Features\n# ============================================================\n\ndef add_interactions(df):\n    df = df.copy()\n\n    # Numeric × Numeric\n    df[\"curv_speed\"] = df[\"curvature\"] * df[\"speed_limit\"]\n\n    # Numeric × Categorical\n    df[\"curv_lighting\"] = df[\"curvature\"].astype(str) + \"_\" + df[\"lighting\"]\n    df[\"speed_lighting\"] = df[\"speed_limit\"].astype(str) + \"_\" + df[\"lighting\"]\n    df[\"curv_weather\"] = df[\"curvature\"].astype(str) + \"_\" + df[\"weather\"]\n    df[\"speed_weather\"] = df[\"speed_limit\"].astype(str) + \"_\" + df[\"weather\"]\n\n    # Categorical × Categorical\n    df[\"lighting_weather\"] = df[\"lighting\"] + \"_\" + df[\"weather\"]\n\n    # Numeric × Categorical (accident history)\n    df[\"accidents_lighting\"] = df[\"num_reported_accidents\"].astype(str) + \"_\" + df[\"lighting\"]\n\n    return df\n\ntrain = add_interactions(train)\ntest  = add_interactions(test)\n\nprint(\"✅ Interaction features created.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T10:38:06.926474Z","iopub.execute_input":"2025-10-25T10:38:06.926818Z","iopub.status.idle":"2025-10-25T10:38:09.436442Z","shell.execute_reply.started":"2025-10-25T10:38:06.926795Z","shell.execute_reply":"2025-10-25T10:38:09.435325Z"}},"outputs":[{"name":"stdout","text":"✅ Interaction features created.\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"# ============================================================\n#  Cell 6: Mild Derived Ratios\n# ============================================================\n\ndef add_ratios(df):\n    df = df.copy()\n    df[\"lanes_per_speed\"] = df[\"speed_limit\"] / (df[\"num_lanes\"] + 1e-3)\n    df[\"curvature_over_speed\"] = df[\"curvature\"] / (df[\"speed_limit\"] + 1e-3)\n    return df\n\ntrain = add_ratios(train)\ntest  = add_ratios(test)\n\nprint(\"✅ Ratio features added.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T10:38:15.190995Z","iopub.execute_input":"2025-10-25T10:38:15.191340Z","iopub.status.idle":"2025-10-25T10:38:15.678365Z","shell.execute_reply.started":"2025-10-25T10:38:15.191314Z","shell.execute_reply":"2025-10-25T10:38:15.677282Z"}},"outputs":[{"name":"stdout","text":"✅ Ratio features added.\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# ============================================================\n#  Cell 7: Drop ID & Reorder Columns\n# ============================================================\n\nid_train = train[\"id\"].copy()\nid_test  = test[\"id\"].copy()\n\ntrain = train.drop(columns=[\"id\"])\ntest  = test.drop(columns=[\"id\"])\n\n# Target last for readability\ncols = [c for c in train.columns if c != target_col] + [target_col]\ntrain = train[cols]\n\nprint(\"✅ ID removed (stored separately).\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T10:38:21.415961Z","iopub.execute_input":"2025-10-25T10:38:21.416321Z","iopub.status.idle":"2025-10-25T10:38:21.660023Z","shell.execute_reply.started":"2025-10-25T10:38:21.416259Z","shell.execute_reply":"2025-10-25T10:38:21.658705Z"}},"outputs":[{"name":"stdout","text":"✅ ID removed (stored separately).\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"# ============================================================\n#  Cell 8: Verify & Save Feature-Engineered CSVs\n# ============================================================\n\nprint(\"Train shape before save:\", train.shape)\nprint(\"Test shape before save:\", test.shape)\n\ntrain_out = train.copy()\ntest_out = test.copy()\n\n# Reattach IDs\ntrain_out.insert(0, \"id\", id_train)\ntest_out.insert(0, \"id\", id_test)\n\n# Save\ntrain_out.to_csv(\"train_fe.csv\", index=False)\ntest_out.to_csv(\"test_fe.csv\", index=False)\n\nprint(\"✅ Saved:\")\nprint(\" - train_fe.csv\")\nprint(\" - test_fe.csv\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-25T10:38:26.100108Z","iopub.execute_input":"2025-10-25T10:38:26.100750Z","iopub.status.idle":"2025-10-25T10:38:37.747932Z","shell.execute_reply.started":"2025-10-25T10:38:26.100723Z","shell.execute_reply":"2025-10-25T10:38:37.746609Z"}},"outputs":[{"name":"stdout","text":"Train shape before save: (517754, 25)\nTest shape before save: (172585, 24)\n✅ Saved:\n - train_fe.csv\n - test_fe.csv\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}